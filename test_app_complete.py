#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Test kompletnej funkcjonalno≈õci aplikacji RMK insGT
Test sprawdza wszystkie kluczowe funkcje przed budowaniem exe
"""

import sys
import os
import json
import tempfile
from datetime import datetime, date

def test_encoding():
    """Test obs≈Çugi polskich znak√≥w"""
    print("üîç Test kodowania UTF-8...")
    
    polish_text = "Test polskich znak√≥w: ƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈º ƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª"
    print(f"   Tekst: {polish_text}")
    
    # Test zapisywania do pliku
    with tempfile.NamedTemporaryFile(mode='w', delete=False, encoding='utf-8') as f:
        f.write(polish_text)
        temp_file = f.name
    
    # Test odczytywania z pliku
    with open(temp_file, 'r', encoding='utf-8') as f:
        read_text = f.read()
    
    os.unlink(temp_file)
    
    if polish_text == read_text:
        print("   ‚úÖ Kodowanie UTF-8 dzia≈Ça poprawnie")
        return True
    else:
        print("   ‚ùå B≈ÇƒÖd kodowania UTF-8")
        return False

def test_data_functions():
    """Test funkcji zwiƒÖzanych z danymi"""
    print("üîç Test funkcji danych...")
    
    # Sprawd≈∫ czy plik data.json istnieje i ma polskie znaki
    if not os.path.exists('data.json'):
        print("   ‚ùå Brak pliku data.json")
        return False
    
    try:
        with open('data.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        categories = data.get('categories', [])
        print(f"   Kategorie: {categories}")
        
        polish_chars = 'ƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª'
        has_polish = any(any(char in cat for char in polish_chars) for cat in categories)
        
        if has_polish:
            print("   ‚úÖ Dane zawierajƒÖ polskie znaki")
            return True
        else:
            print("   ‚ö†Ô∏è  Dane nie zawierajƒÖ polskich znak√≥w (ale to mo≈ºe byƒá OK)")
            return True
            
    except Exception as e:
        print(f"   ‚ùå B≈ÇƒÖd wczytywania danych: {e}")
        return False

def test_pdf_export():
    """Test eksportu PDF z polskimi znakami"""
    print("üîç Test eksportu PDF...")
    
    try:
        from reportlab.lib.pagesizes import A4
        from reportlab.platypus import SimpleDocTemplate, Paragraph
        from reportlab.lib.styles import getSampleStyleSheet
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.ttfonts import TTFont
        
        # Spr√≥buj znale≈∫ƒá font obs≈ÇugujƒÖcy polskie znaki
        font_found = False
        font_name = 'Helvetica'
        
        # Windows fonts
        if os.name == 'nt':
            candidates = [
                'C:\\Windows\\Fonts\\arial.ttf',
                'C:\\Windows\\Fonts\\calibri.ttf',
            ]
            for font_path in candidates:
                if os.path.exists(font_path):
                    try:
                        pdfmetrics.registerFont(TTFont('CustomFont', font_path))
                        font_name = 'CustomFont'
                        font_found = True
                        break
                    except Exception:
                        continue
        
        # Linux fonts
        linux_fonts = [
            '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf',
            '/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf'
        ]
        for font_path in linux_fonts:
            if os.path.exists(font_path):
                try:
                    pdfmetrics.registerFont(TTFont('DejaVuSans', font_path))
                    font_name = 'DejaVuSans'
                    font_found = True
                    break
                except Exception:
                    continue
        
        # Utw√≥rz testowy PDF
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as f:
            pdf_file = f.name
        
        doc = SimpleDocTemplate(pdf_file, pagesize=A4)
        styles = getSampleStyleSheet()
        
        if font_found:
            style = styles['Normal'].clone('PolishStyle')
            style.fontName = font_name
        else:
            style = styles['Normal']
        
        elements = []
        polish_text = "Test polskich znak√≥w w PDF: ƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈º ƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª"
        elements.append(Paragraph(polish_text, style))
        
        doc.build(elements)
        
        # Sprawd≈∫ czy plik zosta≈Ç utworzony
        if os.path.exists(pdf_file) and os.path.getsize(pdf_file) > 0:
            print(f"   ‚úÖ PDF utworzony pomy≈õlnie ({os.path.getsize(pdf_file)} bajt√≥w)")
            if font_found:
                print(f"   ‚úÖ U≈ºyto fontu obs≈ÇugujƒÖcego polskie znaki: {font_name}")
            else:
                print("   ‚ö†Ô∏è  U≈ºyto fontu domy≈õlnego (polskie znaki mogƒÖ nie dzia≈Çaƒá)")
            os.unlink(pdf_file)
            return True
        else:
            print("   ‚ùå B≈ÇƒÖd tworzenia PDF")
            return False
            
    except ImportError:
        print("   ‚ùå Brak biblioteki reportlab")
        return False
    except Exception as e:
        print(f"   ‚ùå B≈ÇƒÖd eksportu PDF: {e}")
        return False

def test_logo():
    """Test dostƒôpno≈õci logo"""
    print("üîç Test plik√≥w logo...")
    
    logo_dir = 'logo'
    if not os.path.exists(logo_dir):
        print("   ‚ùå Brak folderu logo")
        return False
    
    logo_files = []
    for ext in ['.png', '.jpg', '.jpeg']:
        for file in os.listdir(logo_dir):
            if file.lower().endswith(ext):
                logo_files.append(file)
    
    if logo_files:
        print(f"   ‚úÖ Znaleziono pliki logo: {logo_files}")
        
        # Sprawd≈∫ rozmiary plik√≥w
        for logo_file in logo_files:
            path = os.path.join(logo_dir, logo_file)
            size = os.path.getsize(path)
            print(f"      {logo_file}: {size} bajt√≥w")
            
        return True
    else:
        print("   ‚ùå Brak plik√≥w logo")
        return False

def test_imports():
    """Test import√≥w wymaganych bibliotek"""
    print("üîç Test import√≥w bibliotek...")
    
    required_modules = [
        'tkinter',
        'openpyxl',
        'reportlab',
        'json',
        'datetime',
        'dataclasses'
    ]
    
    optional_modules = [
        'ttkbootstrap',
        'PIL'
    ]
    
    failed_imports = []
    
    for module in required_modules:
        try:
            __import__(module)
            print(f"   ‚úÖ {module}")
        except ImportError:
            print(f"   ‚ùå {module} (wymagany)")
            failed_imports.append(module)
    
    for module in optional_modules:
        try:
            __import__(module)
            print(f"   ‚úÖ {module} (opcjonalny)")
        except ImportError:
            print(f"   ‚ö†Ô∏è  {module} (opcjonalny, brak)")
    
    return len(failed_imports) == 0

def main():
    """G≈Ç√≥wna funkcja testowa"""
    print("=" * 60)
    print("üß™ TEST APLIKACJI RMK insGT")
    print("=" * 60)
    print(f"Python: {sys.version}")
    print(f"System: {os.name}")
    print(f"Kodowanie: {sys.getdefaultencoding()}")
    print("=" * 60)
    
    tests = [
        ("Importy bibliotek", test_imports),
        ("Kodowanie UTF-8", test_encoding),
        ("Funkcje danych", test_data_functions),
        ("Eksport PDF", test_pdf_export),
        ("Pliki logo", test_logo),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            if test_func():
                passed += 1
            else:
                print(f"   ‚ùå Test {test_name} nie przeszed≈Ç")
        except Exception as e:
            print(f"   ‚ùå B≈ÇƒÖd w te≈õcie {test_name}: {e}")
    
    print("\n" + "=" * 60)
    print("üìä WYNIKI TEST√ìW")
    print("=" * 60)
    print(f"Przesz≈Çy: {passed}/{total}")
    
    if passed == total:
        print("üéâ Wszystkie testy przesz≈Çy pomy≈õlnie!")
        print("‚úÖ Aplikacja jest gotowa do budowania exe")
        return True
    else:
        print("‚ö†Ô∏è  Niekt√≥re testy nie przesz≈Çy")
        print("üîß Sprawd≈∫ b≈Çƒôdy przed budowaniem exe")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)