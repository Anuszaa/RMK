#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test programowej interakcji z przyciskami w dzia≈ÇajƒÖcej aplikacji RMK
"""

import tkinter as tk
import time
import subprocess
import sys
import os

def find_rmk_windows():
    """Znajd≈∫ okna aplikacji RMK"""
    try:
        # Spr√≥buj znale≈∫ƒá proces python z main.py
        result = subprocess.run(['pgrep', '-f', 'python.*main.py'], 
                              capture_output=True, text=True)
        pids = result.stdout.strip().split('\n') if result.stdout.strip() else []
        
        print(f"Znalezione procesy RMK: {pids}")
        return len(pids) > 0
    except Exception as e:
        print(f"B≈ÇƒÖd wyszukiwania proces√≥w: {e}")
        return False

def test_button_simulation():
    """Symuluj interakcjƒô z przyciskami poprzez tkinter"""
    print("=== TEST SYMULACJI PRZYCISK√ìW RMK ===")
    
    # Sprawd≈∫ czy aplikacja dzia≈Ça
    if not find_rmk_windows():
        print("‚ùå Nie znaleziono dzia≈ÇajƒÖcej aplikacji RMK")
        return False
    
    print("‚úì Znaleziono dzia≈ÇajƒÖcƒÖ aplikacjƒô RMK")
    
    try:
        # Utw√≥rz po≈ÇƒÖczenie z g≈Ç√≥wnym oknem tkinter
        root = tk.Tk()
        root.withdraw()  # Ukryj to okno testowe
        
        # Pobierz listƒô wszystkich okien tkinter
        app_windows = []
        for child in root.winfo_children():
            if isinstance(child, tk.Toplevel):
                app_windows.append(child)
        
        # Alternatywnie: spr√≥buj znale≈∫ƒá g≈Ç√≥wne okno aplikacji
        import tkinter.messagebox as msgbox
        
        # Test 1: Sprawd≈∫ czy mo≈ºna wys≈Çaƒá zdarzenie do aplikacji
        print("\nüìã Test 1: Symulacja klikniƒôcia przycisku...")
        
        # U≈ºyj xdotool do symulacji klikniƒôƒá (je≈õli dostƒôpne)
        try:
            # Sprawd≈∫ czy xdotool jest dostƒôpne
            result = subprocess.run(['which', 'xdotool'], capture_output=True)
            if result.returncode == 0:
                print("‚úì xdotool dostƒôpne - mo≈ºna symulowaƒá klikniƒôcia")
                
                # Znajd≈∫ okno RMK
                result = subprocess.run(['xdotool', 'search', '--name', 'RMK'], 
                                      capture_output=True, text=True)
                if result.stdout.strip():
                    window_id = result.stdout.strip().split('\n')[0]
                    print(f"‚úì Znaleziono okno RMK: {window_id}")
                    
                    # Aktywuj okno
                    subprocess.run(['xdotool', 'windowactivate', window_id])
                    time.sleep(1)
                    
                    # Symuluj klikniƒôcie w miejsce przycisku "Generuj harmonogram"
                    # (wsp√≥≈Çrzƒôdne przybli≈ºone)
                    subprocess.run(['xdotool', 'mousemove', '--window', window_id, '200', '100'])
                    subprocess.run(['xdotool', 'click', '1'])
                    
                    print("‚úì Wys≈Çano klikniƒôcie do przycisku")
                    time.sleep(2)
                    
                else:
                    print("‚ùå Nie znaleziono okna RMK przez xdotool")
            else:
                print("‚ö†Ô∏è xdotool niedostƒôpne")
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd symulacji xdotool: {e}")
        
        # Test 2: Sprawd≈∫ logowanie zdarze≈Ñ
        print("\nüìã Test 2: Sprawdzenie log√≥w aplikacji...")
        
        # Poszukaj log√≥w DEBUG_BTN w terminalu gdzie dzia≈Ça aplikacja
        print("Sprawd≈∫ terminal gdzie uruchomi≈Çe≈õ aplikacjƒô pod kƒÖtem komunikat√≥w:")
        print("  - DEBUG_BTN: 'Generuj harmonogram' invoked -> ...")
        print("  - DEBUG: generate_harmonogram called")
        
        root.destroy()
        return True
        
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd testu symulacji: {e}")
        return False

def test_manual_interaction():
    """Instrukcje do test√≥w manualnych"""
    print("\n=== INSTRUKCJE TEST√ìW MANUALNYCH ===")
    print("1. Sprawd≈∫ czy aplikacja RMK jest otwarta")
    print("2. Przejd≈∫ do zak≈Çadki 'Lista RMK'")
    print("3. Wybierz pozycjƒô z listy (kliknij na wiersz)")
    print("4. Kliknij przycisk 'Generuj harmonogram'")
    print("5. Sprawd≈∫ terminal - powinny pojawiƒá siƒô komunikaty:")
    print("   - DEBUG_BTN: 'Generuj harmonogram' invoked -> generate_harmonogram")
    print("   - DEBUG: generate_harmonogram called")
    print("   - DEBUG: inserting row_values=...")
    print()
    print("6. Przejd≈∫ do zak≈Çadki 'Harmonogram'")
    print("7. Wybierz pozycjƒô z listy rozwijanej")
    print("8. Kliknij 'Poka≈º harmonogram'")
    print("9. Sprawd≈∫ komunikaty w terminalu")
    print()
    print("Je≈õli nie widzisz komunikat√≥w DEBUG_BTN, przyciski nie dzia≈ÇajƒÖ.")
    print("Je≈õli widzisz DEBUG_BTN ale nie ma efektu, problem jest w logice funkcji.")

if __name__ == "__main__":
    print("TEST INTERAKCJI Z PRZYCISKAMI RMK")
    print("=" * 50)
    
    # Test czy aplikacja dzia≈Ça
    if find_rmk_windows():
        print("‚úì Aplikacja RMK dzia≈Ça")
        
        # Uruchom testy
        test_button_simulation()
        test_manual_interaction()
        
    else:
        print("‚ùå Aplikacja RMK nie dzia≈Ça")
        print("\nAby uruchomiƒá aplikacjƒô:")
        print("RMK_DEBUG_BUTTONS=1 xvfb-run -a python /workspaces/RMK/main.py &")